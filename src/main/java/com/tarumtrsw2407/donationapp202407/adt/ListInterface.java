package com.tarumtrsw2407.donationapp202407.adt;import java.util.Iterator;/** * An interface for a List ADT that allows for efficient storage, retrieval, and manipulation * of elements of any type. * * @param <T> the type of elements in this list */public interface ListInterface<T> extends Iterable<T> {    /**     * Returns the number of items in the list.     *     * @return the number of items in the list     */    int size();    /**     * Returns the item at the specified position.     *     * @param pos the position of the item to return     * @return the item at the specified position, or null if the position is invalid     * @throws IndexOutOfBoundsException if the position is out of range     */    T at(int pos);        /**     * Returns all items.     *     * @return a list of items.     */    ListInterface<T> getItems();    /**     * Returns items within an inclusive index range.     *     * @param start the starting position (inclusive)     * @param end the ending position (inclusive)     * @return a list of items within the range, or null if any of the positions are invalid     * @throws IndexOutOfBoundsException if the start or end positions are out of range     * @throws IllegalArgumentException if end is less than start     */    ListInterface<T> getItems(int start, int end);        /**     * Returns the position of the first instance of the specified item in the list.     *     * @param item the item to search for     * @return integer index, or -1 if not found     */    int getPosOf(T item);    /**     * Returns positions of instance(s) of the specified item in the list.     *     * @param item the item to search for     * @param global if true, get indices for all instances, otherwise stop operation at first instance.     * @return a list of integer indices, or an empty list if the item doesn't exist     */    ListInterface<Integer> getPosOf(T item,boolean global);    /**     * Returns positions of instances of all the specified items in the list.     *     * @param items the items to search for     * @param global if true, get indices for all instances, otherwise stop operation at first instance.     * @return a list of integer indices lists, or an empty list if no items are specified     */    ListInterface<ListInterface<Integer>> getPosOf(ListInterface<T> items,boolean global);        /**     * Returns the iterator of the list.     *     * @return the list iterator.     */    Iterator<T> getIterator();    /**     * Adds a new item to the end of the list.     *     * @param item the item to be added     * @return the new size of the list after the append operation     */    int append(T item);    /**     * Adds a list of items to the end of the list.     *     * @param items the items to be added     * @return the new size of the list after the append operation     */    int append(ListInterface<T> items);    /**     * Adds a new item at the specified position in the list.     *     * @param pos the position at which to insert the item     * @param item the item to be inserted     * @return the new size of the list after the insert operation     * @throws IndexOutOfBoundsException if the position is out of range     */    int insert(int pos, T item);    /**     * Adds new items at the specified position in the list.     *     * @param pos the position at which to insert the items     * @param items the items to be inserted     * @return the new size of the list after the insert operation     * @throws IndexOutOfBoundsException if the position is out of range     */    int insert(int pos, ListInterface<T> items);    /**     * Replaces the item at the specified position with the new item.     *     * @param pos the position of the item to be replaced     * @param item the new item     * @return the replaced item     * @throws IndexOutOfBoundsException if the position is out of range     */    T replace(int pos, T item);    /**     * Replaces items at specified positions with new items.     *     * @param posItemPair a list of entries, each containing a position and the new item     * @return a list of entries, each containing a position and the replaced item     * @throws IndexOutOfBoundsException if any position is out of range     */    ListInterface<Entry<Integer, T>> replace(ListInterface<Entry<Integer, T>> posItemPair);    /**     * Removes the item at the specified position.     *     * @param pos the position of the item to be removed     * @return the removed item, or null if the position is invalid     * @throws IndexOutOfBoundsException if the position is out of range     */    T delete(int pos);    /**     * Removes items at specified positions.     *     * @param pos the positions of the items to be removed     * @return a list of successfully removed items, may be empty if all deletes failed     * @throws IndexOutOfBoundsException if any position is out of range     */    ListInterface<T> delete(ListInterface<Integer> pos);    /**     * Finds and removes the first instance of the specified item.     *     * @param item the item to be removed     * @return the removed item, or null if the item doesn't exist     */    T delete(T item);    /**     * Finds and removes all instances of the specified item.     *     * @param item the item to be removed     * @return the removed item, or null if the item doesn't exist     */    T erase(T item);    /**     * Removes all items from the list.     */    void clear();}